#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=8:00:00            # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-600
#SBATCH --mem=8G                  # memory required per node - amount of memory (in bytes)
#SBATCH --job-name ce             # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########
EXP=chg-env
DATA_DIR=/mnt/scratch/lalejini/data/sgp-regulation/tag-metric-exps/2020-03-20/${EXP}
CONFIG_DIR=/mnt/home/lalejini/devo_ws/Exploring-tag-matching-metrics-in-SignalGP/experiments/tag-metric-exps/configs-${EXP}

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=2000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Executable information
WORLD=chg-env-exp
MATCH_THRESH=0
REGULATOR_TYPE=mult
TAG_LEN=32

##################################
# Constants
MUT_RATE_HAMMING=0.001953125
MUT_RATE_HASH=0.000732421875
MUT_RATE_INTEGER=0.005859375
MUT_RATE_INTEGER_SYM=0.00390625
MUT_RATE_STREAK=0.00146484375

##################################
# General world parameters
NUM_ENV_STATES=8
NUM_ENV_UPDATES=${NUM_ENV_STATES}

CPU_CYCLES_PER_ENV_UPDATE=64
GENERATIONS=1000
POP_SIZE=500
SUMMARY_RESOLUTION=10
SNAPSHOT_RESOLUTION=${GENERATIONS}
USE_FUNC_REGULATION=0

USE_GLOBAL_MEMORY=1
DUPLICATION_RATE=05
MUT_RATE__INST_INS=0
MUT_RATE__INST_DEL=0
MUT_RATE__SEQ_SLIP=0

REPLICATES=100
TREATMENT_ID=0

HAMMING__START=$((1+$TREATMENT_ID*$REPLICATES))
HAMMING__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
HASH__START=$((1+$TREATMENT_ID*$REPLICATES))
HASH__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
INTEGER__START=$((1+$TREATMENT_ID*$REPLICATES))
INTEGER__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
INTEGER_SYM__START=$((1+$TREATMENT_ID*$REPLICATES))
INTEGER_SYM__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
STREAK__START=$((1+$TREATMENT_ID*$REPLICATES))
STREAK__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
STREAK_EXACT__START=$((1+$TREATMENT_ID*$REPLICATES))
STREAK_EXACT__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))


if [ ${SLURM_ARRAY_TASK_ID} -ge ${HAMMING__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${HAMMING__STOP} ] ; then
  MATCH_METRIC=hamming
  TAG_MUT_RATE=${MUT_RATE_HAMMING}
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${HASH__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${HASH__STOP} ] ; then
  MATCH_METRIC=hash
  TAG_MUT_RATE=${MUT_RATE_HASH}
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${INTEGER__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${INTEGER__STOP} ] ; then
  MATCH_METRIC=integer
  TAG_MUT_RATE=${MUT_RATE_INTEGER}
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${INTEGER_SYM__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${INTEGER_SYM__STOP} ] ; then
  MATCH_METRIC=integer-symmetric
  TAG_MUT_RATE=${MUT_RATE_INTEGER_SYM}
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${STREAK__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${STREAK__STOP} ] ; then
  MATCH_METRIC=streak
  TAG_MUT_RATE=${MUT_RATE_STREAK}
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${STREAK_EXACT__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${STREAK_EXACT__STOP} ] ; then
  MATCH_METRIC=streak-exact
  TAG_MUT_RATE=${MUT_RATE_STREAK}
else
 echo "run ${SEED} failed to launch" >> ${DATA_DIR}/failed_to_launch.txt
fi

MUT_RATE__FUNC_DUP=0.${DUPLICATION_RATE}
MUT_RATE__FUNC_DEL=0.${DUPLICATION_RATE}

MUT_RATE__INST_TAG_BF=${TAG_MUT_RATE}
MUT_RATE__FUNC_TAG_BF=${TAG_MUT_RATE}

EXEC=${WORLD}_tag-len-${TAG_LEN}_match-metric-${MATCH_METRIC}_thresh-${MATCH_THRESH}_reg-${REGULATOR_TYPE}

RUN_NAME=RUN__ENV_STATES_${NUM_ENV_STATES}__METRIC_${MATCH_METRIC}__SEED_${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

mkdir -p ${RUN_DIR}
cd ${RUN_DIR}
cp ${CONFIG_DIR}/config.cfg .
cp ${CONFIG_DIR}/${EXEC} .

module load GCC/9.1.0-2.32

echo "./${EXEC} -SEED ${SEED} -MUT_RATE__SEQ_SLIP ${MUT_RATE__SEQ_SLIP} -NUM_ENV_STATES ${NUM_ENV_STATES} -NUM_ENV_UPDATES ${NUM_ENV_UPDATES} -CPU_CYCLES_PER_ENV_UPDATE ${CPU_CYCLES_PER_ENV_UPDATE} -GENERATIONS ${GENERATIONS} -POP_SIZE ${POP_SIZE} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY} -MUT_RATE__INST_INS ${MUT_RATE__INST_INS} -MUT_RATE__INST_DEL ${MUT_RATE__INST_DEL} -MUT_RATE__FUNC_DUP ${MUT_RATE__FUNC_DUP} -MUT_RATE__FUNC_DEL ${MUT_RATE__FUNC_DEL} -MUT_RATE__INST_TAG_BF ${MUT_RATE__INST_TAG_BF} -MUT_RATE__FUNC_TAG_BF ${MUT_RATE__FUNC_TAG_BF}" > ./cmd.txt
./${EXEC} -SEED ${SEED} -MUT_RATE__SEQ_SLIP ${MUT_RATE__SEQ_SLIP} -NUM_ENV_STATES ${NUM_ENV_STATES} -NUM_ENV_UPDATES ${NUM_ENV_UPDATES} -CPU_CYCLES_PER_ENV_UPDATE ${CPU_CYCLES_PER_ENV_UPDATE} -GENERATIONS ${GENERATIONS} -POP_SIZE ${POP_SIZE} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY} -MUT_RATE__INST_INS ${MUT_RATE__INST_INS} -MUT_RATE__INST_DEL ${MUT_RATE__INST_DEL} -MUT_RATE__FUNC_DUP ${MUT_RATE__FUNC_DUP} -MUT_RATE__FUNC_DEL ${MUT_RATE__FUNC_DEL} -MUT_RATE__INST_TAG_BF ${MUT_RATE__INST_TAG_BF} -MUT_RATE__FUNC_TAG_BF ${MUT_RATE__FUNC_TAG_BF} > run.log

rm ./${EXEC}